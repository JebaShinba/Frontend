name: CI/CD Pipeline1

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Install Mocha Globally (if Mocha is not in `package.json`)
        run: npm install -g mocha

      - name: Run Mocha Tests
        run: |
          if ! mocha; then
            echo "Mocha test execution failed. Exiting..."
            exit 1
          fi

      - name: Build Frontend
        run: npm run build

      - name: Run Frontend Tests
        run: |
          if ! npm test; then
            echo "Frontend tests failed. Exiting..."
            exit 1
          fi

      - name: Check Docker Version
        run: |
          if ! docker --version; then
            echo "Docker is not installed or the version is incompatible. Exiting..."
            exit 1
          fi

      - name: Build Docker Image
        run: |
          if ! docker build -t my-selenium-app:latest .; then
            echo "Docker image build failed. Exiting..."
            exit 1
          fi

      - name: Save Docker Image
        run: docker image save my-selenium-app:latest | xz -z -e -7 -T0 > image.xz

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_id }}  # Use the run id as the version tag
          release_name: Release ${{ github.run_id }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically available in Actions

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: image.xz  # Path to the compressed Docker image
          asset_name: image.xz
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Selenium
        run: pip install selenium

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager

      - name: Run Google Search Test
        id: run_tests
        run: |
           python Google.py > test_results.log || exit 0
           cat test_results.log
      
      - name: Show test results
        run: cat test_results.log
      
      - name: Confirm test execution
        if: ${{ steps.run_tests.outcome == 'success' }}
        run: cat test_results.log
      
      - name: Handle test failure
        if: ${{ steps.run_tests.outcome != 'success' }}
        run: cat test_results.log

      - name: Deploy application
        run: npm run deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Verify Deployment Status
        run: |
          # Check that the application is accessible and responding correctly.
          curl --fail https://your-app-url.com || exit 1

     

      - name: Configure Git User
        run: |
          git config --global user.email "jebashinba2001@gmail.com"
          git config --global user.name "JebaShinba"

      - name: Tag the Release
        run: |
          git tag -a "deploy-${{ github.run_id }}" -m "Deployed via CI/CD pipeline"
          git push origin "deploy-${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


   

      
